class Movement
{
    static int sizeX;
    static int sizeY;
    static int shift;
    static int cellSize;
    static String left;
    static String right;
    static String up;
    static String down;

    function void init() 
    {
        let sizeX = 512;
        let sizeY = 256;
        let shift = 1; // только делители cellSize
        let cellSize = 16;
        let left = "left";
        let right = "right";
        let up = "up";
        let down = "down";
        return;
    }
    
    function void moveEnemy(int cellX, int cellY, String direction, int enemyType)
    {
        var int i;
        var int x;
        var int y;
        let x = cellX * cellSize;
        let y = cellY * cellSize;
        let i = 0;
        if ((StringComparsion.stringComp(direction, left)) & (cellX > 3))
        {
            while (i < (cellSize / shift)) 
            {
                do Display.displayEnemy(x, y, false, enemyType);
                let x = x - shift;
                do Display.displayEnemy(x, y, true, enemyType);
                let i = i + 1;
            }
        }
        if ((StringComparsion.stringComp(direction, up)) & (cellY > 0))
        {
            while (i < (cellSize / shift)) 
            {
                do Display.displayEnemy(x, y, false, enemyType);
                let y = y - shift;
                do Display.displayEnemy(x, y, true, enemyType);
                let i = i + 1;
            }
        }
        if ((StringComparsion.stringComp(direction, down)) & (cellY < 15))
        {
            while (i < (cellSize / shift)) 
            {
                do Display.displayEnemy(x, y, false, enemyType);
                let y = y + shift;
                do Display.displayEnemy(x, y, true, enemyType);
                let i = i + 1;
            }
        }
        return;
    }

    function void moveBullet(int cellX, int cellY, String direction)
    {
        var int i;
        var int x;
        var int y;
        let x = cellX * cellSize;
        let y = cellY * cellSize;
        let i = 0;
        if ((StringComparsion.stringComp(direction, left)) & (cellX > 3))
        {
            while (i < (cellSize / shift)) 
            {
                do Screen.setColor(false);
                do Screen.drawRectangle(x, y, x + 15, y + 15);
                let x = x - shift;
                do Display.displayBullet(x, y, true);
                let i = i + 1;
            }
            if (cellX = 4)
            {
                do Screen.setColor(false);
                do Screen.drawRectangle(x, y, x + 15, y + 15);
            }
        }
        if ((StringComparsion.stringComp(direction, right)) & (cellX < 31))
        {
            while (i < (cellSize / shift)) 
            {
                do Screen.setColor(false);
                do Screen.drawRectangle(x, y, x + 15, y + 15);
                let x = x + shift;
                do Display.displayBullet(x, y, true);
                let i = i + 1;
            }
            if (cellX = 30)
            {
                do Screen.setColor(false);
                do Screen.drawRectangle(x, y, x + 15, y + 15);
            }
        }
        return;
    }

    function void movePlayer(int cellX, int cellY, String direction)
    {
        var int i;
        var int x;
        var int y;
        let x = cellX * cellSize;
        let y = cellY * cellSize;
        let i = 0;
        if ((StringComparsion.stringComp(direction, up)) & (cellY > 0))
        {
            while (i < (cellSize / shift)) 
            {
                do Display.displayPlayer(x, y, false);
                let y = y - shift;
                do Display.displayPlayer(x, y, true);
                let i = i + 1;
            }
        }
        if ((StringComparsion.stringComp(direction, down)) & (cellY < 14))
        {
            while (i < (cellSize / shift)) 
            {
                do Display.displayPlayer(x, y, false);
                let y = y + shift;
                do Display.displayPlayer(x, y, true);
                let i = i + 1;
            }
        }
        return;
    }
}